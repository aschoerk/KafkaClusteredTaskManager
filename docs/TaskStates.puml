@startuml
skinparam backgroundColor LightYellow
skinparam state {
  StartColor MediumBlue
  EndColor Red
  BackgroundColor Olive
  BackgroundColor<<Main>> Lightblue
  BackgroundColor<<Error>> Red
  BackgroundColor<<Suspended>> Magenta
  BackgroundColor<<Transient>> LightGreen
  BorderColor Gray
  FontName Impact
}


state "INITIATING" as i <<Main>>
state "CLAIMING" as cg <<Transient>>
state "CLAIMED_BY_NODE(ME)" as cn <<Suspended>>
state "CLAIMED_BY_OTHER" as co <<Suspended>>
state "HANDLING_BY_NODE(ME)" as hn <<Suspended>>
state "HANDLING_BY_OTHER" as ho <<Suspended>>
state "ERROR" as e <<Error>>


[*] -down-> i: start/create Task on node

i -> co: <b>CLAIMING_O</b>,\n<b>CLAIMED_O</b>\narrived
i -> ho: <b>HANDLING_O</b>\narrived
i -down--> cg: waited for random time \ndepending on task period\nto minimize collisions
note right of cg: node did send\nsignal <b>CLAIMING</b>\n to claim the task to\n the topic
cg --> cn: <b>CLAIMING_I</b> arrived\nas first
note left of cn: node did claim the task\nbecause it clearly was\n the first <b>CLAIMING</b> signal\n(lowest offset) on the topic
cg --> co: <b>CLAIMING_O</b>,\n<b>CLAIMED_O</b>,\n<b>HANDLING_O</b> arrived
note left of co: node did not claim,\neither it was not the first <b>CLAIMING</b> signal \n(lowest offset) arrived via the topic,\nor signal <b>CLAIMED</b> arrived
cn -up-> hn: according to schedule,\nnode started the task\nsignal <b>HANDLING_I</b> sent
cn -down-> e: <b>CLAIMED_O,</b> \n<b>HANDLING_O</b> arrived
hn -down-> cn: task was completed\nsignal <b>CLAIMED_I</b> sent
hn -up-> i: max number of \nexecutions on node,\nsignal <b>UNCLAIM_I</b> sent
hn -down-> e: <b>CLAIMED_O,</b> \n<b>HANDLING_O</b> arrived
co -up-> ho: <b>HANDLING_O</b>\narrived
co -left-> e: <b>CLAIMED_I</b>,\n<b>HANDLING_I</b>\narrived
ho -> co: <b>CLAIMED_O</b> arrived, \nother node completed task, \nkeeps it
note left of ho: other node is currently \nexecuting the task
ho -up-> i: <b>UNCLAIM_O</b> arrived\nother node completed task,\ndoes not keep it claimed
}
@enduml
